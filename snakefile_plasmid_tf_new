configfile: 'config.yml'

rule all:
    input:
        expand('abricate_amr/{sample}.tab',sample=config['samples']),
        expand('prokka/{sample}/{sample}.tsv',sample=config['samples'])
    
rule plasmid_amr:
    input:
        'fasta/{sample}.fasta'
    output:
        'abricate_amr/{sample}.tab'
    conda:
        'abricate'
    threads: 4
    shell:
        'abricate {input} > {output}'

rule prokka:
    input:
        'fasta/{sample}.fasta'
    output:
        folder=directory('prokka/{sample}'),
        tsv='prokka/{sample}/{sample}.tsv',
        ffn='prokka/{sample}/{sample}.ffn',
        faa='prokka/{sample}/{sample}.faa'
    conda:
        'prokka'
    threads: 8
    shell:
        'prokka --outdir {output.folder} --prefix {wildcards.sample} {input} --force'

rule wget_sprot:
    input:

    output:
        temp('bin/swissprot/uniprot_sprot.fasta')
    params:
        'https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz'
    threads: 2 
    shell:
        'wget {params} -P bin/swissprot && '
        'gunzip {output}.gz'

rule makeblastdb_sprot:
    input:
        uniprot_fasta='bin/swissprot/uniprot_sprot.fasta'
    output:
        phr='bin/swissprot/swissprot.phr',
        pin='bin/swissprot/swissprot.pin',
        psq='bin/swissprot/swissprot.psq'
    conda:
        'env/blast.yml'
    params:
        db='bin/swissprot/swissprot'
    threads: 4        
    shell:
        'makeblastdb -dbtype prot -in {input.uniprot_fasta} -out {params.db}'

